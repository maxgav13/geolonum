[
["graficos-1.html", "Capitulo 4 Graficos 4.1 Estaticos 4.2 Interactivos", " Capitulo 4 Graficos En este capitulo se muestra como crear diferentes tipos de graficos, tanto estaticos usando el paquete ggplot2 (Wickham, 2016; Wickham et al., 2020), como dinamicos usando los paquetes highcharter (Kunst, 2019), plotly (Sievert et al., 2020), y dygraphs (Vanderkam, Allaire, Owen, Gromer, &amp; Thieurmel, 2018). En este capitulo se van a utilizar los siguientes paquetes: library(babynames) library(nycflights13) library(gapminder) library(dygraphs) library(highcharter) library(plotly) library(RColorBrewer) library(viridis) library(rio) library(tidymodels) library(tidyverse) Los tres primeros corresponden con conjuntos de datos. Asi mismo se vuelven a importar y manipular los datos con que se venia trabajando: data(&quot;airquality&quot;) dat1 &lt;- import(&quot;data/LungCapData2.csv&quot;, setclass = &#39;tibble&#39;) titanic &lt;- import(&quot;data/titanic.csv&quot;, setclass = &#39;tibble&#39;) titanic = titanic %&gt;% mutate(Pclass = as_factor(Pclass), Survived = as_factor(Survived), Sex = as_factor(Sex)) airq = airquality %&gt;% mutate(Month = factor(Month, levels = 5:9, labels = c(&quot;Mayo&quot;, &quot;Junio&quot;, &quot;Julio&quot;, &quot;Agosto&quot;, &quot;Setiembre&quot;)), Sensation = case_when(Temp &lt; 60 ~ &#39;Cold&#39;, Temp &lt; 70 ~ &#39;Cool&#39;, Temp &lt; 85 ~ &#39;Warm&#39;, T ~ &#39;Hot&#39;) %&gt;% as.factor()) 4.1 Estaticos El paquete por exelencia, como se menciono al principio del capitulo, para crear graficos en R es ggplot2. Este se basa en la gramatica de graficos (grammar of graphics), de ahi el gg en el nombre. La estructura basica de cualquier graficos es: ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt;) + &lt;FACET_FUNCTION&gt; + &lt;SCALE_FUNCTION&gt; + &lt;THEME_FUNCTION&gt; donde las partes pricipales son ggplot y geom_*, el resto no son necesarias. Dentro de geom_* se mapean la variables de la tabla a los argumentos de la funcion (x, y, col, fill, size, shape, alpha). La idea basica es trabajar en capas para poder modificar el grafico con mayor detalle y facilidad. 4.1.1 Histograma Este se utiliza para datos numericos continuos. Dentro de geom_histogram hay 3 opciones para definir la discretizacion: bins = Numero de clases binwidth = El ancho de las clases breaks = Un vector con los puntos donde separar los datos El primer grafico (Figura 4.1) muestra el resultado de geom_histogram por defecto. Aqui se esta graficando la temperatura (‘Temp’) de la tabla ‘airquality’ en el eje x, es el eje que hay que usar en los histogramas. p = ggplot(data = airquality, mapping = aes(x=Temp)) + geom_histogram() p ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figura 4.1: Histograma basico La apariencia del grafico anterior se puede mejorar usando los argumentos col y fill, donde el primero corresponde con el color del borde de las barras, y el segundo con el relleno de las barras (Figura 4.2). ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20,col=&quot;black&quot;,fill=&quot;blue&quot;) Figura 4.2: Histograma modificando la cantidad de barras y apariencia El eje x, sobre el cual estamos graficando los datos, se puede modificar con mas detalle usando las funciones scale_x_*, donde en este caso usamos scale_x_continuous() por estar trabajando con datos continuos (Figura 4.3). El primer argumento de estas funciones es el nombre que se le quiere dar al eje, y en el caso siguiente, se modifican las etiquetas del eje con el argumento labels, donde se puede usar una de tantas funciones que se encuentran en el paquete scales. ggplot(airquality,aes(x=Temp)) + geom_histogram(binwidth = 2,col=&quot;black&quot;,fill=&quot;blue&quot;) + scale_x_continuous(&#39;Temperatura&#39;, labels = label_number(suffix = &#39; ºC&#39;)) Figura 4.3: Histograma modificando la apariencia del eje x Otra de las capas que se puede usar son las facetas o paneles, que permiten separar un tipo de grafico, en este caso un histograma, en diferentes graficos de acuerdo a otra variable, por lo general categorica (Figura 4.4). La funcion para esto es facet_wrap(filas ~ cols), que permite definir una o mas variables por las cuales crear los paneles. ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20,col=&quot;black&quot;,fill=&quot;blue&quot;) + facet_wrap(~ Month) Figura 4.4: Histograma en paneles Se venian rellenando las barras todas de un mismo color, por lo que el argumento fill se pone fuera del aes(). Si se quiere rellenar las barras de acuerdo al conteo o densidad es necesario insertar dentro del aes() de geom_histogram el fill=stat(.), donde el punto (.) puede corresponder con el conteo (count) o la densidad (density). Asi como se modifica el eje x anteriormnte con scale_x_*, se puede modificar el relleno con scale_fill_*. En este caso (Figura 4.5) se usa scale_fill_distiller() para usar una de las paletas disponibles en el paquete RColorBrewer (Neuwirth, 2014), donde se tiene que especificar el nombre de la paleta de colores a usar, en este caso palette = 'YlOrRd'. ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20,aes(fill=stat(count)),col=&quot;black&quot;) + scale_fill_distiller(palette = &#39;YlOrRd&#39;) Figura 4.5: Histograma con relleno de acuerdo al conteo Asi como se puede modificar el relleno de las barras, se puede modificar que el eje y no corresponda con el conteo sino con la densidad (Figura 4.6), para esto es necesario insertar dentro del aes() de geom_histogram el y=stat(density), y esto es necesario si se quiere agregar la curva de densidad de los datos (geom_density) para ver su distribucion. ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20,aes(y=stat(density)),col=&quot;black&quot;,fill=&quot;blue&quot;) + geom_density(col=&quot;red&quot;) Figura 4.6: Histograma mostrando la densidad en el eje y en vez del conteo, con la curva de densidad superpuesta Combinando lo aprendido hasta ahora se pueden modificar el relleno junto con el eje y, asi como agregar la curva de densidad, para generar un grafico que brinda mas informacion (Figura 4.7). ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20, aes(y=stat(density),fill=stat(count)), col=&quot;black&quot;) + geom_density(col=&quot;red&quot;) Figura 4.7: Histograma mostrando la densidad en el eje y en vez del conteo, con la curva de densidad superpuesta, y relleno de acuerdo al conteo Estos ultimos dos graficos agregan mas cosas que permiten crear graficos mas complejos e informativos sin mucho esfuerzo. El primero (Figura 4.8) agrega el relleno de acuerdo a una variable categorica, asi como un paneleo por dos variables definiendo filas y columnas. El segundo (Figura 4.9) contruye sobre el primero pero modificando las etiquetas de los paneles usando el argumento labeller, donde se define labeller(variable = vector con nombres), ademas se cambia el relleno con scale_fill_viridis y se modifican las etiquetas con un vector (c('actual' = 'nuevo')). El vector con nombres de labeller y el vector de etiquetas llevan la estructura c('actual' = 'nuevo'), donde ‘actual’ es el valor que tiene la variable y ‘nuevo’ es el nombre que se quiere aparezca en el grafico. ggplot(titanic, aes(x = Age, fill = Survived)) + facet_wrap(Sex ~ Pclass) + geom_density(alpha = 0.5) ## Warning: Removed 177 rows containing non-finite values (stat_density). Figura 4.8: Curva de densidad haciendo uso de varias variables categoricas ggplot(titanic, aes(x = Age, fill = Survived)) + facet_wrap(Sex ~ Pclass, labeller = labeller(Sex = c(&#39;male&#39;=&#39;Masculino&#39;, &#39;female&#39;=&#39;Femenino&#39;), Pclass = c(&#39;1&#39;=&#39;1era&#39;,&#39;2&#39;=&#39;2nda&#39;,&#39;3&#39;=&#39;3era&#39;))) + geom_density(alpha = 0.5) + scale_fill_viridis_d(&#39;Sobrevivio&#39;, labels = c(&#39;1&#39;=&#39;Si&#39;,&#39;0&#39;=&#39;No&#39;)) ## Warning: Removed 177 rows containing non-finite values (stat_density). Figura 4.9: Version mejorada del grafico anterior 4.1.2 Barras Este se utiliza para datos categoricos. Dentro de geom_bar el argumento position puede tener cualquiera de estos tres valores: stack: Apila barras una encima de otra dodge: Pone barras de manera adyacente fill: Las barras tienen la misma altura, normalizadas a 1 (propociones) geom_bar hace el conteo de clases, en caso de tener ya el conteo hecho se usa geom_col. De manera general se puede pasar solo una variable para realizar el conteo, pero este tipo de graficos es mas util cuando se pueden agregar otras variables categoricas. En el primer ejemplo (Figura 4.10) se hace el conteo por genero, y se rellena por si fuman o no, lo que brinda una vision de la cantidad (o proporcion) de hombres y mujeres que fuman o no. En este ejemplo se utiliza position = &quot;fill&quot;, lo que hace que todas las barras tengan las misma altura y comprendan el rango de 0 a 1 en el eje y, lo que asemeja a una vision de proporciones. Adicionalmente, se modifica el eje y (scale_y_continuous) asignandole un nombre y cambiando las etiquetas a porcentaje (labels = label_percent()). ggplot(dat1, aes(Gender,fill=Smoke)) + geom_bar(position = &quot;fill&quot;) + scale_y_continuous(&#39;Proporcion&#39;,labels = label_percent()) Figura 4.10: Grafico de barras con el argumento de posicion fill, para mostrar proporciones entre categorias El siguiente grafico (Figura 4.11) es similar al primero, en que se grafican los mismos datos, pero de otra manera. Se usa position = &quot;dodge&quot;, lo que pone una barra a la par de la otra (esto para la categoria usada en el relleno); adicionalmente, se modifica el eje x (scale_x_discrete) asignandole un nombre y modificando los nombres de las etiquetas (labels); por ultimo, se modifica de forma manual el relleno (scale_fill_manual) asignandole un nombre, que es el que aparecer en la leyenda, las etiquetas (que deben tener el mismo orden de los niveles de la variable), y los valores (values) son los colores a usar para cada nivel. ggplot(dat1, aes(Gender,fill=Smoke)) + geom_bar(position = &quot;dodge&quot;) + scale_x_discrete(&#39;Genero&#39;, labels = c(&#39;Femenino&#39;,&#39;Masculino&#39;)) + scale_fill_manual(&#39;Fumado&#39;, labels = c(&#39;Si&#39;,&#39;No&#39;), values = c(&#39;darkred&#39;,&#39;green4&#39;)) Figura 4.11: Grafico de barras con apariencia modificada y posisicon de las barras una a la par de la otra De igual manera se pueden generar paneles de acuerdo a una variable categorica (Figura 4.12). ggplot(titanic, aes(x = Sex, fill = Survived)) + facet_wrap(~ Pclass) + geom_bar() Figura 4.12: Grafico de barras en paneles Cuando se grafica una variable unicamente el orden de las barras va a estar en funcion del orden de los niveles (Figura 4.13), pero esta representacion puede que no sea la mas clara visualmente. Para corregir lo anterior se pueden reordenar los niveles de la variable (unicamente para el grafico) de acuerdo a la frecuencia (de mayor a menor), usando fct_infreq del paquete forcats (Figura 4.14). gss_cat %&gt;% ggplot(aes(marital)) + geom_bar() Figura 4.13: Grafico de barras basico con orden de barras de acuerdo al orden de los niveles gss_cat %&gt;% ggplot(aes(fct_infreq(marital))) + geom_bar() Figura 4.14: Grafico de barras ordenado de acuerdo a la frecuencia de los niveles Los ejemplos anteriores usaban geom_bar, pero en el caso de que ya se tenga el conteo se puede usar geom_col. En este caso hay que especificar la variable a graficar en x y el conteo en y, el resto de modificaciones se pueden aplicar de igual manera a como se venia mostrando. En este ejemplo (Figura 4.15) debido a que los niveles corresponden con nombres largos y hay muchos, se usa el cambiar los ejes por medio de coord_flip, lo que va a poner en ‘y’ lo que estaba en ‘x’ y viceversa. mpg %&gt;% count(manufacturer, year) %&gt;% mutate(year = as.factor(year)) %&gt;% ggplot(aes(manufacturer,n,fill=year)) + geom_col(position = &#39;dodge&#39;) + coord_flip() + scale_fill_brewer(palette = &#39;Dark2&#39;) Figura 4.15: Grafico de barras precontado y cambiando ejes para mayor claridad 4.1.3 Boxplot Este tipo se usa para datos numericos continuos que normalmente se separan por una variable categorica. Los datos continuos se grafican en el eje y, por lo que hay que especificar esto explicitamente en el aes() (Figura 4.16), y si se quiere separar por una variable categorica, esta se asigna al eje x (Figura 4.17). ggplot(airq,aes(y=Temp)) + geom_boxplot() Figura 4.16: Grafico boxplot basico ggplot(airq,aes(x = Month,y = Temp)) + geom_boxplot() Figura 4.17: Grafico boxplot separado por variable categorica En el tercer ejemplo (Figura 4.18) se agregan un par de funciones que no se habian visto: labs y theme_bw. labs permite modificar los nombres de los ejes y esteticas (col, fill, etc.) sin tener que usar las funciones scale_*_*. theme_bw es uno de los tantos temas que vienen definidos y cambia la apariencia a un grafico en blanco y negro, removiendo el fondo gris que en muchos casos no es lo mejor. ggplot(airq,aes(x = Month,y = Temp)) + geom_boxplot(fill=&quot;white&quot;,col=&quot;red&quot;) + labs(x=&quot;Mes&quot;,y=&quot;Temperatura&quot;) + theme_bw() Figura 4.18: Grafico boxplot con apariencia modificada 4.1.4 Dispersion Estos aplican para datos numericos continuos en ambos ejes. Un grafico basico se muestra en el primer ejemplo (Figura 4.19). ggplot(airquality, aes(Ozone,Temp)) + geom_point() ## Warning: Removed 37 rows containing missing values (geom_point). Figura 4.19: Grafico de dispersion basico Para el caso de puntos se puede cambiar el tipo de icono con el argumento shape, este puede definirse de manera global para todos los puntos o de acuerdo a una variable categorica (Figura 4.20). ggplot(airq, aes(Ozone,Temp,shape=Month)) + geom_point() ## Warning: Removed 37 rows containing missing values (geom_point). Figura 4.20: Grafico de dispersion con la forma de los puntos de acuerdo a una variable categorica Una tarea comun en graficos de dispersion es agregar lineas de tendencia. Para agregar lineas de tendencia en ggplot2 se usa la funcion geom_smooth. Por defecto ajusta una curva loess, pero para cambiarlo se usa el argumento method = 'lm' (Figura 4.21), y para especificar una ecuacion diferente a la regresion simple (y ~ x) se usa formula, donde y y x son genericos (Figura 4.22), NO hay que poner el nombre de las variables que se esta graficando. ggplot(airquality, aes(Wind,Temp)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figura 4.21: Grafico de dispersion con linea de tendencia lineal ggplot(airquality, aes(Ozone,Temp)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = y~poly(x,2)) ## Warning: Removed 37 rows containing non-finite values (stat_smooth). ## Warning: Removed 37 rows containing missing values (geom_point). Figura 4.22: Grafico de dispersion con linea de tendencia polinomial En este caso (Figura 4.23) cuando se aplica el paneleo (facet_wrap) se obtiene una grafico de dispersion con su respectiva linea de tendencia para cada uno de los niveles de la variable categorica. ggplot(airquality, aes(Wind,Temp)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~ Month) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figura 4.23: Grafico de dispersion en paneles con linea de tendencia para cada panel 4.1.5 Lineas Estos graficos son una version del grafico de dispersion, donde el eje x corresponde con una variable continua que tiene cierta secuencia o patron, por lo general tiempo o espacio. El primer grafico (Figura 4.24) muestra como ha cambiado el uso del nombre ‘Max’ a lo largo del tiempo. Primero se filtran los datos para el nombre de interes, y se seleccionan las variables a usar en el grafico. Como el eje y corresponde con proporcion, se modifica para que muestre el porcentaje. babynames %&gt;% filter(name == &quot;Max&quot;) %&gt;% select(year, prop, sex) %&gt;% ggplot(mapping = aes(x = year, y = prop)) + geom_line(mapping = aes(color = sex)) + scale_y_continuous(labels = label_percent()) Figura 4.24: Grafico de linea basico En el segundo grafico de lineas (Figura 4.25) se grafica el numero de tormentas por anho, de nuevo, realizando una manipulacion de los datos para obtener la informacion que se desea desplegar. El ultimo grafico (Figura 4.26) simplemente hace la separacion de diferentes lineas de acuerdo a una variable categorica. storms %&gt;% group_by(year) %&gt;% summarize(n_storm = n_distinct(name)) %&gt;% ggplot() + geom_line(mapping = aes(x = year, y = n_storm)) Figura 4.25: Grafico de linea basico con otros datos storms %&gt;% group_by(year,status) %&gt;% summarize(n_storm = n_distinct(name)) %&gt;% ggplot() + geom_line(mapping = aes(x = year, y = n_storm, col = status)) Figura 4.26: Grafico de linea basico, con diferentes lineas de acuerdo a una variable categorica 4.1.6 Graficos estadisticos Estos sirven para resumir los datos. Los ejemplos que aqui se muestran corresponden con el despliegue de intervalos de confianza de una variable numerica para diferentes niveles de una variable categorica. ggplot(airquality, aes(Month, Temp)) + stat_summary(fun.y = mean, geom = &quot;point&quot;, color = &quot;black&quot;) + stat_summary(fun.data = mean_cl_normal, geom = &quot;errorbar&quot;, width = 0.2) + theme_bw() ## Warning: `fun.y` is deprecated. Use `fun` instead. Figura 4.27: Grafico estadistico mostrando intervalo de confianza como barras de error ggplot(airquality, aes(Month, Temp)) + stat_summary(fun.data = mean_cl_normal, geom = &quot;pointrange&quot;, color = &quot;red&quot;, size=1) + theme_bw() Figura 4.28: Grafico estadistico mostrando intervalo de confianza como punto y rango 4.1.7 Salvando graficos Se muestran funciones para salvar graficos, donde las extensiones mas usadas son .png, .tiff, y .pdf. Por defecto ggsave salva el ultimo grafico creado, a menos que se haya guardado el grafico en un objeto y se le pase dicho objeto al argumento plot. El resto de argumentos son claros en lo que representan. Para el caso de un .pdf hay que remover el argumento type. ggsave(filename = &quot;figs/Testgg.png&quot;, plot = p, dpi = 300, width = 7, height = 4, units = &quot;in&quot;, type = &quot;cairo&quot;) ggsave(filename = &quot;figs/Testgg.pdf&quot;, plot = p, dpi = 300, width = 7, height = 4, units = &quot;in&quot;) 4.2 Interactivos Una vez sabiendo utilizar ggplot2 la forma mas sencilla de hacer un grafico interactivo es mediante plotly::ggplotly(). El paquete plotly (Sievert et al., 2020) se usa para graficos interactivos y tiene una sintaxis un poco diferente a ggplot2, por lo que hay ciertos graficos que no van a ser convertidos apropiadamente, pero la mayoria de graficos debieran funcionar. Otros paquetes para graficos interactivos son: highcarter: Sintaxis similar a ggplot, con ciertas limitantes, rbokeh: Graficos interactivos generales, dygraphs: Series temporales, mapview y leaflet: Mapas En las siguientes secciones se va a recrear alguno de los graficos anteriores para hacerlo interactivo con ggplotly, y se va a crear uno similar con highcharter. El ejercicio de entender como funciona highcharter queda a acargo del lector, en general los ejemplos y funciones son claras. Una caracteristica de estos graficos interactivo, cuando tienen leyenda, es que al hacer click sobre una de la entradas de la leyenda, esta serie de datos es escondida del grafico, dejando visible unicamente lo otro. En el caso de highcharter los ejes se ajustan automaticamente, este no es el caso para plotly. 4.2.1 Histograma La version interctiva de la Figura 4.7 se muestra en la Figura 4.29, la version usando highcharter se muestra en la Figura 4.30. (ggplot(airquality,aes(x=Temp)) + geom_histogram(bins = 20, aes(y=stat(density),fill=stat(count)), col=&quot;black&quot;) + geom_density(col=&quot;red&quot;)) %&gt;% plotly::ggplotly() Figura 4.29: Grafico interactivo de un histograma con plotly with(airq, hchist(Temp,color=&#39;red&#39;,name=&#39;Temp&#39;)) %&gt;% hc_xAxis(title = list(text = &#39;Temperatura&#39;)) %&gt;% hc_exporting(enabled=T) Figura 4.30: Grafico interactivo de un histograma con highcharter 4.2.2 Barras La version interctiva de la Figura 4.15 se muestra en la Figura 4.31, la version usando highcharter se muestra en la Figura 4.32. (mpg %&gt;% count(manufacturer, year) %&gt;% mutate(year = as.factor(year)) %&gt;% ggplot(aes(manufacturer,n,fill=year)) + geom_col(position = &#39;dodge&#39;) + coord_flip() + scale_fill_brewer(palette = &#39;Dark2&#39;)) %&gt;% plotly::ggplotly() Figura 4.31: Grafico interactivo de barras con plotly mpg %&gt;% count(manufacturer, year) %&gt;% hchart(&#39;bar&#39;, hcaes(x = manufacturer, y = n, group = year)) %&gt;% hc_xAxis(title = list(text = &#39;Constructor&#39;)) %&gt;% hc_yAxis(title = list(text = &#39;Cantidad&#39;)) %&gt;% hc_exporting(enabled=T) ## Warning: `parse_quosure()` is deprecated as of rlang 0.2.0. ## Please use `parse_quo()` instead. ## This warning is displayed once per session. Figura 4.32: Grafico interactivo de barras con highcharter 4.2.3 Boxplot La version interctiva de la Figura 4.17 se muestra en la Figura 4.33, la version usando highcharter se muestra en la Figura 4.34. (ggplot(airq,aes(x = Month,y = Temp)) + geom_boxplot()) %&gt;% plotly::ggplotly() Figura 4.33: Grafico interactivo boxplot con plotly with(airq, hcboxplot(x = Temp, var = Month)) %&gt;% hc_yAxis(title = list(text = &#39;Temperatura&#39;)) %&gt;% hc_xAxis(title = list(text = &#39;Mes&#39;)) %&gt;% hc_exporting(enabled=T) ## Warning: `cols` is now required. ## Please use `cols = c(data)` Figura 4.34: Grafico interactivo boxplot con highcharter 4.2.4 Dispersion La version interctiva de la Figura 4.21 se muestra en la Figura 4.35, la version usando highcharter se muestra en la Figura 4.36, con el agregado de que muestra la ecuacion de cada linea de tendencia. (ggplot(airquality, aes(Wind,Temp)) + geom_point() + geom_smooth(method = &quot;lm&quot;)) %&gt;% plotly::ggplotly() ## `geom_smooth()` using formula &#39;y ~ x&#39; Figura 4.35: Grafico interactivo de dispersion con plotly hchart(airq, &#39;scatter&#39;, hcaes(Wind, Temp, group=Month), regression = T) %&gt;% hc_xAxis(title = list(text = &#39;Viento&#39;)) %&gt;% hc_yAxis(title = list(text = &#39;Temperatura&#39;)) %&gt;% hc_colors(viridis(n_distinct(airq$Month))) %&gt;% hc_add_dependency(&#39;plugins/highcharts-regression.js&#39;) %&gt;% hc_exporting(enabled=T) Figura 4.36: Grafico interactivo de dispersion con highcharter 4.2.5 Lineas La version interctiva de la Figura 4.26 se muestra en la Figura 4.37, la version usando highcharter se muestra en la Figura 4.38, y la version usando dygraphs se muestra en la Figura 4.39. En este ultimo caso es necesario que los datos esten en formato ancho, donde la primer columna corresponde con el eje x, y el resto de columnas corresponden con las series temporales/espaciales a graficar por separado. (storms %&gt;% group_by(year,status) %&gt;% summarize(n_storm = n_distinct(name)) %&gt;% ggplot() + geom_line(mapping = aes(x = year, y = n_storm, col = status))) %&gt;% plotly::ggplotly() Figura 4.37: Grafico interactivo de lineas con plotly storms %&gt;% group_by(year,status) %&gt;% summarize(n_storm = n_distinct(name)) %&gt;% hchart(&#39;line&#39;, hcaes(year, n_storm, group = status)) %&gt;% hc_xAxis(title = list(text = &#39;Anho&#39;)) %&gt;% hc_yAxis(title = list(text = &#39;Cantidad&#39;)) %&gt;% hc_exporting(enabled=T) %&gt;% hc_tooltip(shared=T,crosshairs=T, backgroundColor=&#39;rgba(247,247,247,0.5)&#39;,shadow=F) %&gt;% hc_chart(zoomType=&#39;x&#39;)%&gt;% hc_add_theme(hc_theme_google()) %&gt;% hc_plotOptions(line = list(marker = list( enabled = F, radius = 2 ) )) Figura 4.38: Grafico interactivo de lineas con highcharter storms %&gt;% group_by(year,status) %&gt;% summarize(n_storm = n_distinct(name)) %&gt;% pivot_wider(names_from = status,values_from = n_storm) %&gt;% dygraph() %&gt;% dyAxis(&#39;x&#39;, label = &#39;Anho&#39;) %&gt;% dyAxis(&#39;y&#39;, label = &#39;Cantidad&#39;) %&gt;% dyRangeSelector() Figura 4.39: Grafico interactivo de lineas con dygraphs Referencias "]
]
